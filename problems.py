# -*- coding: utf-8 -*-

import math
import eulerlib as elib
import debug
import itertools

def problem_1():
    """
    If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
    """
    def three_five_seed(l):
        three_multis = filter(lambda x: x % 3 == 0, l)
        five_multis = filter(lambda x: x % 5 == 0, l)
        return list(set(three_multis + five_multis))
    return sum(three_five_seed(xrange(1000)))

def problem_2():
    """
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    """
    return sum(elib.conditioned_generator(elib.filtered_generator(elib.fib(), lambda x: x % 2 == 0), lambda x: x < 4000000))


if __name__ == '__main__':
    import sys
    try:
        #n = int(sys.argv[1])
        for n in range(0,1):
            with debug.Timer():
                print "Answer to problem %d is" % n, globals()['problem_%d' % n]()
    except: 
        pass

